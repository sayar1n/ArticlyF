"use client"

import { useState, useEffect } from 'react';
import styles from "./page.module.scss"

interface ChatMessage {
    id: number;
    text: string;
    isUser: boolean;
    timestamp: Date;
}

interface FAQ {
    id: number;
    question: string;
    answer: string;
}

export default function FeedbackSettings() {
    const [feedbackMessage, setFeedbackMessage] = useState('');
    const [chatMessage, setChatMessage] = useState('');
    const [comment, setComment] = useState('');
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [additionalInfo, setAdditionalInfo] = useState('');
    const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
        {
            id: 1,
            text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! —è –≤—ã —Ä—ã–±–æ–≤ –ø—Ä–æ–¥–∞–µ—Ç–µ?',
            isUser: false,
            timestamp: new Date()
        },
        {
            id: 2,
            text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ—Ç,–ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é',
            isUser: true,
            timestamp: new Date()
        },
        {
            id: 3,
            text: '–ö—Ä–∞—Å–∏–≤–æ–µ :3',
            isUser: false,
            timestamp: new Date()
        }
    ]);
    const [isFAQOpen, setIsFAQOpen] = useState(false);

    const faqList: FAQ[] = [
        {
            id: 1,
            question: "–ò—Å–ø—É–≥–∞–ª—Å—è?",
            answer: "–ë—É, –∏—Å–ø—É–≥–∞–ª—Å—è? –ù–µ –±–æ–π—Å—è! –Ø –¥—Ä—É–≥! –Ø —Ç–µ–±—è –Ω–µ –æ–±–∏–∂—É! –ò–¥–∏ —Å—é–¥–∞, –∏–¥–∏ –∫–æ –º–Ω–µ, —Å—è–¥—å —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π."
        },
        {
            id: 2,
            question: "–ö—Ç–æ —è?",
            answer: "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        },
        {
            id: 3,
            question: "–ö–æ–≥–¥–∞ –∂–µ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Å—Ç–∞–Ω—É —Å—á–∞—Å—Ç–ª–∏–≤—ã–º?",
            answer: "–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç...."
        }
    ];

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
            message: feedbackMessage,
            comment,
            additionalInfo
        });
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setFeedbackMessage('');
        setComment('');
        setAdditionalInfo('');
    };

    const handleChatSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!chatMessage.trim()) return;

        const newMessage: ChatMessage = {
            id: chatMessages.length + 1,
            text: chatMessage.trim(),
            isUser: true,
            timestamp: new Date()
        };

        setChatMessages([...chatMessages, newMessage]);
        setChatMessage('');
    };

    const copyEmail = async () => {
        try {
            await navigator.clipboard.writeText('Articly@gmail.com');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        } catch (err) {
            console.error('Failed to copy email:', err);
        }
    };

    const handleFAQ = () => {
        setIsFAQOpen(true);
    };

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    useEffect(() => {
        if (isFAQOpen || isChatOpen) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
            document.body.style.overflow = 'hidden';
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Ä–∞–≤–Ω—ã–π —à–∏—Ä–∏–Ω–µ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä—ã–∂–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            document.body.style.paddingRight = 'var(--scrollbar-width)';
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            document.body.style.overflow = 'unset';
            document.body.style.paddingRight = '0';
        }

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            document.body.style.overflow = 'unset';
            document.body.style.paddingRight = '0';
        };
    }, [isFAQOpen, isChatOpen]);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const handleModalClick = (e: React.MouseEvent) => {
        if (e.target === e.currentTarget) {
            if (isFAQOpen) setIsFAQOpen(false);
            if (isChatOpen) setIsChatOpen(false);
        }
    };

    return (
        <div className={styles.container}>
            <h1>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</h1>

            <form onSubmit={handleSubmit} className={styles.feedbackForm}>
                <div className={styles.section}>
                    <h2>–°–æ–æ–±—â–µ–Ω–∏—è</h2>
                    <div className={styles.inputWrapper}>
                        <input
                            type="text"
                            value={feedbackMessage}
                            onChange={(e) => setFeedbackMessage(e.target.value)}
                            placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
                        />
                    </div>
                </div>

                <div className={styles.section}>
                    <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h2>
                    <div className={styles.inputWrapper}>
                        <textarea
                            value={comment}
                            onChange={(e) => setComment(e.target.value)}
                            placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                        />
                    </div>
                </div>

                <div className={styles.section}>
                    <h2>–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
                    <div className={styles.inputWrapper}>
                        <input
                            type="email"
                            value="Articly@gmail.com"
                            readOnly
                        />
                    </div>
                </div>

                <div className={styles.section}>
                    <h2>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</h2>
                    <div className={styles.inputWrapper}>
                        <input
                            type="email"
                            value="Articly@gmail.com"
                            readOnly
                        />
                    </div>
                </div>

                <div className={styles.buttonContainer}>
                    <button type="submit" className={styles.submitButton}>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                </div>

                <div className={styles.chatActions}>
                    <button type="button" className={styles.chatButton} onClick={() => setIsChatOpen(true)}>
                        –ß–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
                    </button>
                </div>
            </form>

            <div className={styles.bottomPanel}>
                <button
                    className={styles.bottomButton}
                    onClick={handleFAQ}
                >
                    –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏–∫–∏
                </button>
                <button
                    className={styles.bottomButton}
                    onClick={copyEmail}
                >
                    –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: <span className={styles.email}>Articly@gmail.com</span>
                </button>
                <button
                    className={styles.bottomButton}
                    onClick={() => setIsChatOpen(true)}
                >
                    –ß–∞—Ç —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
                </button>
            </div>

            {isChatOpen && (
                <div className={styles.chatModal} onClick={handleModalClick}>
                    <div className={styles.chatContent}>
                        <div className={styles.chatHeader}>
                            <h3>–ß–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º</h3>
                            <button
                                className={styles.closeButton}
                                onClick={() => setIsChatOpen(false)}
                            >
                                √ó
                            </button>
                        </div>
                        <div className={styles.chatMessages}>
                            {chatMessages.map((msg) => (
                                <div
                                    key={msg.id}
                                    className={`${styles.message} ${msg.isUser ? styles.userMessage : styles.supportMessage}`}
                                >
                                    {msg.text}
                                </div>
                            ))}
                        </div>
                        <form onSubmit={handleChatSubmit} className={styles.chatInputForm}>
                            <input
                                type="text"
                                value={chatMessage}
                                onChange={(e) => setChatMessage(e.target.value)}
                                placeholder="....."
                            />
                            <button type="submit">
                                <span>üìé</span>
                            </button>
                        </form>
                    </div>
                </div>
            )}

            {isFAQOpen && (
                <div className={styles.faqModal} onClick={handleModalClick}>
                    <div className={styles.faqContent}>
                        <div className={styles.faqHeader}>
                            <div className={styles.searchBar}>
                                <input
                                    type="text"
                                    placeholder="–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."
                                    className={styles.searchInput}
                                />
                                <button className={styles.filterButton}>
                                    <span>üîç</span>
                                </button>
                            </div>
                            <button
                                className={styles.closeButton}
                                onClick={() => setIsFAQOpen(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className={styles.faqList}>
                            {faqList.map((faq) => (
                                <div key={faq.id} className={styles.faqItem}>
                                    <div className={styles.question}>
                                        {faq.question}
                                    </div>
                                    <div className={styles.answer}>
                                        {faq.answer}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
